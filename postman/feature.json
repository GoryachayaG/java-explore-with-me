{
  "info": {
    "_postman_id": "7f89e701-653f-4de6-b8ae-2b3c0719e5a6",
    "name": "Feature Comments",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_exporter_id": "27054764"
  },
  "item": [
    {
      "name": "Создание пользователя с id = 136",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 201\", function () {\r",
              "    pm.expect(pm.response.code).to.equal(201);\r",
              "});\r",
              "pm.test(\"Ответ должен содержать тело в формате json\", function () {\r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});\r",
              "pm.test(\"Test user 'id' field\", function () {\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData).to.have.property('id');\r",
              "    pm.expect(jsonData.id, '\"id\" must be 136').to.eql(136);\r",
              "});\r",
              "pm.test(\"Test user 'email' field\", function () {\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData).to.have.property('email');\r",
              "    pm.expect(jsonData.email, '\"email\" must be \"ivan@mail.ru\"').to.eql('ivan@mail.ru');\r",
              "});\r",
              "pm.test(\"Test user 'name' field\", function () {\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData).to.have.property('name');\r",
              "    pm.expect(jsonData.name, '\"name\" must be \"Ivan\"').to.eql('Ivan');\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\r\n    \"name\": \"Ivan\",\r\n    \"email\": \"ivan@mail.ru\"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{baseUrl}}/admin/users",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "admin",
            "users"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Создание категории с id = 121",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 201\", function () {\r",
              "    pm.expect(pm.response.code).to.equal(201);\r",
              "});\r",
              "pm.test(\"Ответ должен содержать тело в формате json\", function () {\r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});\r",
              "pm.test(\"Test category 'id' field\", function () {\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData).to.have.property('id');\r",
              "    pm.expect(jsonData.id, '\"id\" must be 121').to.eql(121);\r",
              "});\r",
              "pm.test(\"Test category 'name' field\", function () {\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData).to.have.property('name');\r",
              "    pm.expect(jsonData.name, '\"name\" must be \"Movie\"').to.eql('Movie');\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\r\n    \"name\": \"Movie\"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{baseUrl}}/admin/categories",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "admin",
            "categories"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Добавление нового события с id = 106",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 201\", function () {\r",
              "    pm.expect(pm.response.code).to.equal(201);\r",
              "});\r",
              "pm.test(\"Ответ должен содержать тело в формате json\", function () {\r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});\r",
              "pm.test(\"Test event 'id' field\", function () {\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData).to.have.property('id');\r",
              "    pm.expect(jsonData.id, '\"id\" must be 106').to.eql(106);\r",
              "});\r",
              "pm.test(\"Test event 'title' field\", function () {\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData).to.have.property('title');\r",
              "    pm.expect(jsonData.title, '\"title\" must be \"будет весело\"').to.eql('будет весело');\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\r\n    \"annotation\": \"Очень длинный и интересный фильм\",\r\n    \"category\": 1,\r\n    \"description\": \"Фильм про добро и его победу над злом\",\r\n    \"eventDate\" : \"2023-10-10 18:00:00\",\r\n    \"location\": {\r\n        \"lat\": 55.3895,\r\n        \"lon\": 52.5849\r\n    },\r\n    \"paid\": true,\r\n    \"participantLimit\": 95,\r\n    \"requestModeration\": true,\r\n    \"title\": \"будет весело\"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{baseUrl}}/users/:userId/events",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "users",
            ":userId",
            "events"
          ],
          "variable": [
            {
              "key": "userId",
              "value": "136"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Создание пользователя с id = 137",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 201\", function () {\r",
              "    pm.expect(pm.response.code).to.equal(201);\r",
              "});\r",
              "pm.test(\"Ответ должен содержать тело в формате json\", function () {\r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});\r",
              "pm.test(\"Test user 'id' field\", function () {\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData).to.have.property('id');\r",
              "    pm.expect(jsonData.id, '\"id\" must be 137').to.eql(137);\r",
              "});\r",
              "pm.test(\"Test user 'email' field\", function () {\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData).to.have.property('email');\r",
              "    pm.expect(jsonData.email, '\"email\" must be \"jane@mail.ru\"').to.eql('jane@mail.ru');\r",
              "});\r",
              "pm.test(\"Test user 'name' field\", function () {\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData).to.have.property('name');\r",
              "    pm.expect(jsonData.name, '\"name\" must be \"Jane\"').to.eql('Jane');\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\r\n    \"name\": \"Jane\",\r\n    \"email\": \"jane@mail.ru\"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{baseUrl}}/admin/users",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "admin",
            "users"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Ошибка при создании комментария к неопубликованному событию с id = 106",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 409\", function () {\r",
              "    pm.expect(pm.response.code).to.equal(409);\r",
              "});\r",
              "pm.test(\"Ответ должен содержать тело в формате json\", function () {\r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\r\n    \"text\": \"событие опубликуйте\"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{baseUrl}}/users/:userId/comments?eventId=106",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "users",
            ":userId",
            "comments"
          ],
          "query": [
            {
              "key": "eventId",
              "value": "106"
            }
          ],
          "variable": [
            {
              "key": "userId",
              "value": "137"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Ошибка при создании комментария несуществующим пользователем",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 404\", function () {\r",
              "    pm.expect(pm.response.code).to.equal(404);\r",
              "});\r",
              "pm.test(\"Ответ должен содержать тело в формате json\", function () {\r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\r\n    \"text\": \"пользователя не существует\"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{baseUrl}}/users/:userId/comments?eventId=106",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "users",
            ":userId",
            "comments"
          ],
          "query": [
            {
              "key": "eventId",
              "value": "106"
            }
          ],
          "variable": [
            {
              "key": "userId",
              "value": "150"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Ошибка при создании комментария к несуществующему событию",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 404\", function () {\r",
              "    pm.expect(pm.response.code).to.equal(404);\r",
              "});\r",
              "pm.test(\"Ответ должен содержать тело в формате json\", function () {\r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\r\n    \"text\": \"события не существует\"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{baseUrl}}/users/:userId/comments?eventId=150",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "users",
            ":userId",
            "comments"
          ],
          "query": [
            {
              "key": "eventId",
              "value": "150"
            }
          ],
          "variable": [
            {
              "key": "userId",
              "value": "137"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Ошибка при создании комментария с отсутствующим текстом",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 400\", function () {\r",
              "    pm.expect(pm.response.code).to.equal(400);\r",
              "});\r",
              "pm.test(\"Ответ должен содержать тело в формате json\", function () {\r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\r\n    \"text\": \"\"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{baseUrl}}/users/:userId/comments?eventId=106",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "users",
            ":userId",
            "comments"
          ],
          "query": [
            {
              "key": "eventId",
              "value": "106"
            }
          ],
          "variable": [
            {
              "key": "userId",
              "value": "137"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Ошибка при создании комментария с отсутствующим телом",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 400\", function () {\r",
              "    pm.expect(pm.response.code).to.equal(400);\r",
              "});\r",
              "pm.test(\"Ответ должен содержать тело в формате json\", function () {\r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/users/:userId/comments?eventId=106",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "users",
            ":userId",
            "comments"
          ],
          "query": [
            {
              "key": "eventId",
              "value": "106"
            }
          ],
          "variable": [
            {
              "key": "userId",
              "value": "137"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Обновляем статус события с id = 106",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 200\", function () {\r",
              "    pm.expect(pm.response.code).to.equal(200);\r",
              "});\r",
              "pm.test(\"Ответ должен содержать тело в формате json\", function () {\r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});\r",
              "pm.test(\"Test event 'id' field\", function () {\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData).to.have.property('id');\r",
              "    pm.expect(jsonData.id, '\"id\" must be 106').to.eql(106);\r",
              "});\r",
              "pm.test(\"Test event 'title' field\", function () {\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData).to.have.property('title');\r",
              "    pm.expect(jsonData.title, '\"title\" must be \"будет весело\"').to.eql('будет весело');\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "PATCH",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\r\n    \"stateAction\": \"PUBLISH_EVENT\"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{baseUrl}}/admin/events/:eventId",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "admin",
            "events",
            ":eventId"
          ],
          "variable": [
            {
              "key": "eventId",
              "value": "106"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Создание комментария с id=1",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 201\", function () {\r",
              "    pm.expect(pm.response.code).to.equal(201);\r",
              "});\r",
              "pm.test(\"Ответ должен содержать тело в формате json\", function () {\r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});\r",
              "pm.test(\"Test comment 'id' field\", function () {\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData).to.have.property('id');\r",
              "    pm.expect(jsonData.id, '\"id\" must be 1').to.eql(1);\r",
              "});\r",
              "pm.test(\"Test comment 'text' field\", function () {\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData).to.have.property('text');\r",
              "    pm.expect(jsonData.text, '\"text\" must be \"комментарий создан\"').to.eql('комментарий создан');\r",
              "});\r",
              "pm.test(\"Комментарий также должен содержать поля author, publishedOn, eventId\", function () {\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData).to.have.property('author');\r",
              "    pm.expect(jsonData).to.have.property('publishedOn');\r",
              "    pm.expect(jsonData).to.have.property('eventId');\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\r\n    \"text\": \"комментарий создан\"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{baseUrl}}/users/:userId/comments?eventId=106",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "users",
            ":userId",
            "comments"
          ],
          "query": [
            {
              "key": "eventId",
              "value": "106"
            }
          ],
          "variable": [
            {
              "key": "userId",
              "value": "137"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Создание комментария с id = 2",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 201\", function () {\r",
              "    pm.expect(pm.response.code).to.equal(201);\r",
              "});\r",
              "pm.test(\"Ответ должен содержать тело в формате json\", function () {\r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});\r",
              "pm.test(\"Test comment 'id' field\", function () {\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData).to.have.property('id');\r",
              "    pm.expect(jsonData.id, '\"id\" must be 2').to.eql(2);\r",
              "});\r",
              "pm.test(\"Test comment 'text' field\", function () {\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData).to.have.property('text');\r",
              "    pm.expect(jsonData.text, '\"text\" must be \"комментарий #2 создан\"').to.eql('комментарий #2 создан');\r",
              "});\r",
              "pm.test(\"Комментарий также должен содержать поля author, publishedOn, eventId\", function () {\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData).to.have.property('author');\r",
              "    pm.expect(jsonData).to.have.property('publishedOn');\r",
              "    pm.expect(jsonData).to.have.property('eventId');\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\r\n    \"text\": \"комментарий #2 создан\"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{baseUrl}}/users/:userId/comments?eventId=106",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "users",
            ":userId",
            "comments"
          ],
          "query": [
            {
              "key": "eventId",
              "value": "106"
            }
          ],
          "variable": [
            {
              "key": "userId",
              "value": "137"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Обновление комментария с id = 2",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 200\", function () {\r",
              "    pm.expect(pm.response.code).to.equal(200);\r",
              "});\r",
              "pm.test(\"Ответ должен содержать тело в формате json\", function () {\r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});\r",
              "pm.test(\"Test comment 'id' field\", function () {\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData).to.have.property('id');\r",
              "    pm.expect(jsonData.id, '\"id\" must be 2').to.eql(2);\r",
              "});\r",
              "pm.test(\"Test comment 'text' field\", function () {\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData).to.have.property('text');\r",
              "    pm.expect(jsonData.text, '\"text\" must be \"обновили комментарий №2\"').to.eql('обновили комментарий №2');\r",
              "});\r",
              "pm.test(\"Комментарий также должен содержать поля author, publishedOn, eventId\", function () {\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData).to.have.property('author');\r",
              "    pm.expect(jsonData).to.have.property('publishedOn');\r",
              "    pm.expect(jsonData).to.have.property('eventId');\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "PATCH",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\r\n    \"text\": \"обновили комментарий №2\"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{baseUrl}}/users/:userId/comments/:commentId",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "users",
            ":userId",
            "comments",
            ":commentId"
          ],
          "variable": [
            {
              "key": "userId",
              "value": "137"
            },
            {
              "key": "commentId",
              "value": "2"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Ошибка при обновлении комментария с id = 2 не автором",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 409\", function () {\r",
              "    pm.expect(pm.response.code).to.equal(409);\r",
              "});\r",
              "pm.test(\"Ответ должен содержать тело в формате json\", function () {\r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "PATCH",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\r\n    \"text\": \"не тот автор\"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{baseUrl}}/users/:userId/comments/:commentId",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "users",
            ":userId",
            "comments",
            ":commentId"
          ],
          "variable": [
            {
              "key": "userId",
              "value": "136"
            },
            {
              "key": "commentId",
              "value": "2"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Ошибка при обновлении комментария несуществующим пользователем",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 404\", function () {\r",
              "    pm.expect(pm.response.code).to.equal(404);\r",
              "});\r",
              "pm.test(\"Ответ должен содержать тело в формате json\", function () {\r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "PATCH",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\r\n    \"text\": \"не тот автор\"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{baseUrl}}/users/:userId/comments/:commentId",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "users",
            ":userId",
            "comments",
            ":commentId"
          ],
          "variable": [
            {
              "key": "userId",
              "value": "150"
            },
            {
              "key": "commentId",
              "value": "2"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Ошибка при обновлении комментария с несуществующим id",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 404\", function () {\r",
              "    pm.expect(pm.response.code).to.equal(404);\r",
              "});\r",
              "pm.test(\"Ответ должен содержать тело в формате json\", function () {\r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "PATCH",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\r\n    \"text\": \"комментария не существует\"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{baseUrl}}/users/:userId/comments/:commentId",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "users",
            ":userId",
            "comments",
            ":commentId"
          ],
          "variable": [
            {
              "key": "userId",
              "value": "137"
            },
            {
              "key": "commentId",
              "value": "150"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Ошибка при обновлении комментария с отсутствующим телом",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 400\", function () {\r",
              "    pm.expect(pm.response.code).to.equal(400);\r",
              "});\r",
              "pm.test(\"Ответ должен содержать тело в формате json\", function () {\r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "PATCH",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/users/:userId/comments/:commentId",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "users",
            ":userId",
            "comments",
            ":commentId"
          ],
          "variable": [
            {
              "key": "userId",
              "value": "137"
            },
            {
              "key": "commentId",
              "value": "2"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Создание события с id = 107",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 201\", function () {\r",
              "    pm.expect(pm.response.code).to.equal(201);\r",
              "});\r",
              "pm.test(\"Ответ должен содержать тело в формате json\", function () {\r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});\r",
              "pm.test(\"Test event 'id' field\", function () {\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData).to.have.property('id');\r",
              "    pm.expect(jsonData.id, '\"id\" must be 107').to.eql(107);\r",
              "});\r",
              "pm.test(\"Test event 'title' field\", function () {\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData).to.have.property('title');\r",
              "    pm.expect(jsonData.title, '\"title\" must be \"Очень хороший фильм\"').to.eql('Очень хороший фильм');\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\r\n    \"annotation\": \"Очень длинный и интересный фильм\",\r\n    \"category\": 1,\r\n    \"description\": \"Фильм про добро и его победу над злом\",\r\n    \"eventDate\" : \"2024-10-10 18:00:00\",\r\n    \"location\": {\r\n        \"lat\": 56.3895,\r\n        \"lon\": 54.5849\r\n    },\r\n    \"paid\": true,\r\n    \"participantLimit\": 100,\r\n    \"requestModeration\": true,\r\n    \"title\": \"Очень хороший фильм\"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{baseUrl}}/users/:userId/events",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "users",
            ":userId",
            "events"
          ],
          "variable": [
            {
              "key": "userId",
              "value": "136"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Обновление события id = 107",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 200\", function () {\r",
              "    pm.expect(pm.response.code).to.equal(200);\r",
              "});\r",
              "pm.test(\"Ответ должен содержать тело в формате json\", function () {\r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});\r",
              "pm.test(\"Test event 'id' field\", function () {\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData).to.have.property('id');\r",
              "    pm.expect(jsonData.id, '\"id\" must be 107').to.eql(107);\r",
              "});\r",
              "pm.test(\"Test event 'title' field\", function () {\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData).to.have.property('title');\r",
              "    pm.expect(jsonData.title, '\"title\" must be \"Очень хороший фильм\"').to.eql('Очень хороший фильм');\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "PATCH",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\r\n    \"stateAction\": \"PUBLISH_EVENT\"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{baseUrl}}/admin/events/:eventId",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "admin",
            "events",
            ":eventId"
          ],
          "variable": [
            {
              "key": "eventId",
              "value": "107"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Создание комментария с id = 3",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 201\", function () {\r",
              "    pm.expect(pm.response.code).to.equal(201);\r",
              "});\r",
              "pm.test(\"Ответ должен содержать тело в формате json\", function () {\r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});\r",
              "pm.test(\"Test comment 'id' field\", function () {\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData).to.have.property('id');\r",
              "    pm.expect(jsonData.id, '\"id\" must be 3').to.eql(3);\r",
              "});\r",
              "pm.test(\"Test comment 'text' field\", function () {\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData).to.have.property('text');\r",
              "    pm.expect(jsonData.text, '\"text\" must be \"Создали комментарий № 3\"').to.eql('Создали комментарий № 3');\r",
              "});\r",
              "pm.test(\"Комментарий также должен содержать поля author, publishedOn, eventId\", function () {\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData).to.have.property('author');\r",
              "    pm.expect(jsonData).to.have.property('publishedOn');\r",
              "    pm.expect(jsonData).to.have.property('eventId');\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\r\n    \"text\": \"Создали комментарий № 3\"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{baseUrl}}/users/:userId/comments?eventId=107",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "users",
            ":userId",
            "comments"
          ],
          "query": [
            {
              "key": "eventId",
              "value": "107"
            }
          ],
          "variable": [
            {
              "key": "userId",
              "value": "137"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Получение пользователем с id = 137 всех своих комментариев",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
              "    pm.expect(pm.response.code).to.equal(200);\r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});\r",
              "pm.test(\"Размер списка комментариев должен быть равен 3\", function () {\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData.length, 'List length must be 3').to.eql(3);\r",
              "})\r",
              ""
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/users/:userId/comments",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "users",
            ":userId",
            "comments"
          ],
          "variable": [
            {
              "key": "userId",
              "value": "137"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Получение пользователем с id = 137 своих комментариев к событию 106",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
              "    pm.expect(pm.response.code).to.equal(200);\r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});\r",
              "pm.test(\"Размер списка комментариев должен быть равен 2\", function () {\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData.length, 'List length must be 2').to.eql(2);\r",
              "})"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/users/:userId/comments?eventId=106",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "users",
            ":userId",
            "comments"
          ],
          "query": [
            {
              "key": "eventId",
              "value": "106"
            }
          ],
          "variable": [
            {
              "key": "userId",
              "value": "137"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Получение пользователем с id = 136 всех своих комментариев",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
              "    pm.expect(pm.response.code).to.equal(200);\r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});\r",
              "pm.test(\"Размер списка комментариев должен быть равен 3\", function () {\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData.length, 'List length must be 0').to.eql(0);\r",
              "})"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/users/:userId/comments",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "users",
            ":userId",
            "comments"
          ],
          "variable": [
            {
              "key": "userId",
              "value": "136"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Ошибка при удалении пользователем с id = 136 чужого комментария",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 409\", function () {\r",
              "    pm.expect(pm.response.code).to.equal(409);\r",
              "});\r",
              "pm.test(\"Ответ должен содержать тело в формате json\", function () {\r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "DELETE",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/users/:userId/comments/:commentId",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "users",
            ":userId",
            "comments",
            ":commentId"
          ],
          "variable": [
            {
              "key": "userId",
              "value": "136"
            },
            {
              "key": "commentId",
              "value": "1"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Удаление комментария с id = 1 автором",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 204\", function () {\r",
              "    pm.expect(pm.response.code).to.equal(204);\r",
              "});\r",
              ""
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "DELETE",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/users/:userId/comments/:commentId",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "users",
            ":userId",
            "comments",
            ":commentId"
          ],
          "variable": [
            {
              "key": "userId",
              "value": "137"
            },
            {
              "key": "commentId",
              "value": "1"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Ошибка при удалении несуществующего комментария",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 404\", function () {\r",
              "    pm.expect(pm.response.code).to.equal(404);\r",
              "});\r",
              "pm.test(\"Ответ должен содержать тело в формате json\", function () {\r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "DELETE",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/users/:userId/comments/:commentId",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "users",
            ":userId",
            "comments",
            ":commentId"
          ],
          "variable": [
            {
              "key": "userId",
              "value": "136"
            },
            {
              "key": "commentId",
              "value": "5"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Ошибка при удалении комментария несуществующим пользователем",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 404\", function () {\r",
              "    pm.expect(pm.response.code).to.equal(404);\r",
              "});\r",
              "pm.test(\"Ответ должен содержать тело в формате json\", function () {\r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "DELETE",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/users/:userId/comments/:commentId",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "users",
            ":userId",
            "comments",
            ":commentId"
          ],
          "variable": [
            {
              "key": "userId",
              "value": "150"
            },
            {
              "key": "commentId",
              "value": "2"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Получение администратором списка всех комментариев",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
              "    pm.expect(pm.response.code).to.equal(200);\r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});\r",
              "pm.test(\"Размер списка комментариев должен быть равен 2\", function () {\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData.length, 'List length must be 2').to.eql(2);\r",
              "})"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/admin/comments",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "admin",
            "comments"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Получение администратором списка комментариев к событию с id = 107",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
              "    pm.expect(pm.response.code).to.equal(200);\r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});\r",
              "pm.test(\"Размер списка комментариев должен быть равен 1\", function () {\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData.length, 'List length must be 1').to.eql(1);\r",
              "})"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/admin/comments?eventId=107",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "admin",
            "comments"
          ],
          "query": [
            {
              "key": "eventId",
              "value": "107"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Удаление администратором комментария с id = 2",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 204\", function () {\r",
              "    pm.expect(pm.response.code).to.equal(204);\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "DELETE",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/admin/comments/:commentId",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "admin",
            "comments",
            ":commentId"
          ],
          "variable": [
            {
              "key": "commentId",
              "value": "2"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Получение администратором списка всех комментариев после удаления",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
              "    pm.expect(pm.response.code).to.equal(200);\r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});\r",
              "pm.test(\"Размер списка комментариев должен быть равен 1\", function () {\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData.length, 'List length must be 1').to.eql(1);\r",
              "})"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/admin/comments",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "admin",
            "comments"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Ошибка при удалении администратором несуществующего комментария",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 404\", function () {\r",
              "    pm.expect(pm.response.code).to.equal(404);\r",
              "});\r",
              "pm.test(\"Ответ должен содержать тело в формате json\", function () {\r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "DELETE",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/admin/comments/:commentId",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "admin",
            "comments",
            ":commentId"
          ],
          "variable": [
            {
              "key": "commentId",
              "value": "5"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Получение списка комментариев к событию с id = 2 в ответ на публичный запрос",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
              "    pm.expect(pm.response.code).to.equal(200);\r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});\r",
              "pm.test(\"Размер списка комментариев должен быть равен 1\", function () {\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData.length, 'List length must be 1').to.eql(1);\r",
              "})"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/comments?eventId=107",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "comments"
          ],
          "query": [
            {
              "key": "eventId",
              "value": "107"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Ошибка при получении списка комментариев без указания события в ответ на публичный запрос",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 400\", function () {\r",
              "    pm.expect(pm.response.code).to.equal(400);\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/comments",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "comments"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Получение комментария с id = 3 в ответ на публичный запрос",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 200\", function () {\r",
              "    pm.expect(pm.response.code).to.equal(200);\r",
              "});\r",
              "pm.test(\"Ответ должен содержать тело в формате json\", function () {\r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});\r",
              "pm.test(\"Test comment 'id' field\", function () {\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData).to.have.property('id');\r",
              "    pm.expect(jsonData.id, '\"id\" must be 3').to.eql(3);\r",
              "});\r",
              "pm.test(\"Test comment 'text' field\", function () {\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData).to.have.property('text');\r",
              "    pm.expect(jsonData.text, '\"text\" must be \"Создали комментарий № 3\"').to.eql('Создали комментарий № 3');\r",
              "});\r",
              "pm.test(\"Комментарий также должен содержать поля author, publishedOn, eventId\", function () {\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData).to.have.property('author');\r",
              "    pm.expect(jsonData).to.have.property('publishedOn');\r",
              "    pm.expect(jsonData).to.have.property('eventId');\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/comments/:commentId",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "comments",
            ":commentId"
          ],
          "variable": [
            {
              "key": "commentId",
              "value": "3"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Ошибка при получении несуществующего комментария в ответ на публичный запрос",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 404\", function () {\r",
              "    pm.expect(pm.response.code).to.equal(404);\r",
              "});\r",
              "pm.test(\"Ответ должен содержать тело в формате json\", function () {\r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/comments/:commentId",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "comments",
            ":commentId"
          ],
          "variable": [
            {
              "key": "commentId",
              "value": "5"
            }
          ]
        }
      },
      "response": []
    }
  ],
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:8080"
    }
  ]
}